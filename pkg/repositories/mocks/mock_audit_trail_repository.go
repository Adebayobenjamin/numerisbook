// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repositories/interfaces/audit_trail_repository.interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/repositories/interfaces/audit_trail_repository.interface.go -destination=pkg/repositories/mocks/mock_audit_trail_repository.go -package=repository_mocks
//

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Adebayobenjamin/numerisbook/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuditTrailRepository is a mock of AuditTrailRepository interface.
type MockAuditTrailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuditTrailRepositoryMockRecorder
	isgomock struct{}
}

// MockAuditTrailRepositoryMockRecorder is the mock recorder for MockAuditTrailRepository.
type MockAuditTrailRepositoryMockRecorder struct {
	mock *MockAuditTrailRepository
}

// NewMockAuditTrailRepository creates a new mock instance.
func NewMockAuditTrailRepository(ctrl *gomock.Controller) *MockAuditTrailRepository {
	mock := &MockAuditTrailRepository{ctrl: ctrl}
	mock.recorder = &MockAuditTrailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditTrailRepository) EXPECT() *MockAuditTrailRepositoryMockRecorder {
	return m.recorder
}

// GetAllCustomerAuditTrails mocks base method.
func (m *MockAuditTrailRepository) GetAllCustomerAuditTrails(ctx context.Context, customerID uint, limit, offset int) ([]models.AuditTrail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomerAuditTrails", ctx, customerID, limit, offset)
	ret0, _ := ret[0].([]models.AuditTrail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomerAuditTrails indicates an expected call of GetAllCustomerAuditTrails.
func (mr *MockAuditTrailRepositoryMockRecorder) GetAllCustomerAuditTrails(ctx, customerID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomerAuditTrails", reflect.TypeOf((*MockAuditTrailRepository)(nil).GetAllCustomerAuditTrails), ctx, customerID, limit, offset)
}

// GetByInvoiceIDAndCustomerID mocks base method.
func (m *MockAuditTrailRepository) GetByInvoiceIDAndCustomerID(ctx context.Context, invoiceID, customerID uint, limit, offset int) ([]models.AuditTrail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInvoiceIDAndCustomerID", ctx, invoiceID, customerID, limit, offset)
	ret0, _ := ret[0].([]models.AuditTrail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInvoiceIDAndCustomerID indicates an expected call of GetByInvoiceIDAndCustomerID.
func (mr *MockAuditTrailRepositoryMockRecorder) GetByInvoiceIDAndCustomerID(ctx, invoiceID, customerID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInvoiceIDAndCustomerID", reflect.TypeOf((*MockAuditTrailRepository)(nil).GetByInvoiceIDAndCustomerID), ctx, invoiceID, customerID, limit, offset)
}

// LogEvent mocks base method.
func (m *MockAuditTrailRepository) LogEvent(ctx context.Context, eventType models.EventType, logLevel models.LogLevel, message string, invoiceID, customerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogEvent", ctx, eventType, logLevel, message, invoiceID, customerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogEvent indicates an expected call of LogEvent.
func (mr *MockAuditTrailRepositoryMockRecorder) LogEvent(ctx, eventType, logLevel, message, invoiceID, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEvent", reflect.TypeOf((*MockAuditTrailRepository)(nil).LogEvent), ctx, eventType, logLevel, message, invoiceID, customerID)
}
