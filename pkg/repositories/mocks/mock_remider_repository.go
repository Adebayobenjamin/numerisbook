// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repositories/interfaces/remider_repository.interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/repositories/interfaces/remider_repository.interface.go -destination=pkg/repositories/mocks/mock_remider_repository.go -package=repository_mocks
//

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Adebayobenjamin/numerisbook/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockReminderRepository is a mock of ReminderRepository interface.
type MockReminderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReminderRepositoryMockRecorder
	isgomock struct{}
}

// MockReminderRepositoryMockRecorder is the mock recorder for MockReminderRepository.
type MockReminderRepositoryMockRecorder struct {
	mock *MockReminderRepository
}

// NewMockReminderRepository creates a new mock instance.
func NewMockReminderRepository(ctrl *gomock.Controller) *MockReminderRepository {
	mock := &MockReminderRepository{ctrl: ctrl}
	mock.recorder = &MockReminderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReminderRepository) EXPECT() *MockReminderRepositoryMockRecorder {
	return m.recorder
}

// UpsertReminders mocks base method.
func (m *MockReminderRepository) UpsertReminders(ctx context.Context, reminders []models.InvoiceReminder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertReminders", ctx, reminders)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertReminders indicates an expected call of UpsertReminders.
func (mr *MockReminderRepositoryMockRecorder) UpsertReminders(ctx, reminders any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertReminders", reflect.TypeOf((*MockReminderRepository)(nil).UpsertReminders), ctx, reminders)
}
