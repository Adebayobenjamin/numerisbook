// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repositories/interfaces/invoice_repository.interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/repositories/interfaces/invoice_repository.interface.go -destination=pkg/repositories/mocks/mock_invoice_repository.go -package=repository_mocks
//

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	context "context"
	reflect "reflect"

	response_dto "github.com/Adebayobenjamin/numerisbook/pkg/dtos/response"
	models "github.com/Adebayobenjamin/numerisbook/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockInvoiceRepository is a mock of InvoiceRepository interface.
type MockInvoiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceRepositoryMockRecorder
	isgomock struct{}
}

// MockInvoiceRepositoryMockRecorder is the mock recorder for MockInvoiceRepository.
type MockInvoiceRepositoryMockRecorder struct {
	mock *MockInvoiceRepository
}

// NewMockInvoiceRepository creates a new mock instance.
func NewMockInvoiceRepository(ctrl *gomock.Controller) *MockInvoiceRepository {
	mock := &MockInvoiceRepository{ctrl: ctrl}
	mock.recorder = &MockInvoiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceRepository) EXPECT() *MockInvoiceRepositoryMockRecorder {
	return m.recorder
}

// CreateInvoiceWithItems mocks base method.
func (m *MockInvoiceRepository) CreateInvoiceWithItems(ctx context.Context, invoice *models.Invoice) (*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceWithItems", ctx, invoice)
	ret0, _ := ret[0].(*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceWithItems indicates an expected call of CreateInvoiceWithItems.
func (mr *MockInvoiceRepositoryMockRecorder) CreateInvoiceWithItems(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceWithItems", reflect.TypeOf((*MockInvoiceRepository)(nil).CreateInvoiceWithItems), ctx, invoice)
}

// DuplicateInvoice mocks base method.
func (m *MockInvoiceRepository) DuplicateInvoice(ctx context.Context, invoice *models.Invoice) (*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DuplicateInvoice", ctx, invoice)
	ret0, _ := ret[0].(*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DuplicateInvoice indicates an expected call of DuplicateInvoice.
func (mr *MockInvoiceRepositoryMockRecorder) DuplicateInvoice(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DuplicateInvoice", reflect.TypeOf((*MockInvoiceRepository)(nil).DuplicateInvoice), ctx, invoice)
}

// GetAllCustomerInvoices mocks base method.
func (m *MockInvoiceRepository) GetAllCustomerInvoices(ctx context.Context, customerID uint, limit, offset int) ([]models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomerInvoices", ctx, customerID, limit, offset)
	ret0, _ := ret[0].([]models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomerInvoices indicates an expected call of GetAllCustomerInvoices.
func (mr *MockInvoiceRepositoryMockRecorder) GetAllCustomerInvoices(ctx, customerID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomerInvoices", reflect.TypeOf((*MockInvoiceRepository)(nil).GetAllCustomerInvoices), ctx, customerID, limit, offset)
}

// GetByIDAndCutomerID mocks base method.
func (m *MockInvoiceRepository) GetByIDAndCutomerID(ctx context.Context, id, customerID uint) (*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDAndCutomerID", ctx, id, customerID)
	ret0, _ := ret[0].(*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDAndCutomerID indicates an expected call of GetByIDAndCutomerID.
func (mr *MockInvoiceRepositoryMockRecorder) GetByIDAndCutomerID(ctx, id, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDAndCutomerID", reflect.TypeOf((*MockInvoiceRepository)(nil).GetByIDAndCutomerID), ctx, id, customerID)
}

// GetDetails mocks base method.
func (m *MockInvoiceRepository) GetDetails(ctx context.Context, invoiceID uint) (*response_dto.GetInvoiceDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetails", ctx, invoiceID)
	ret0, _ := ret[0].(*response_dto.GetInvoiceDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetails indicates an expected call of GetDetails.
func (mr *MockInvoiceRepositoryMockRecorder) GetDetails(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetails", reflect.TypeOf((*MockInvoiceRepository)(nil).GetDetails), ctx, invoiceID)
}

// GetStatistics mocks base method.
func (m *MockInvoiceRepository) GetStatistics(ctx context.Context, customerID uint) (*response_dto.GetInvoiceStatisticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", ctx, customerID)
	ret0, _ := ret[0].(*response_dto.GetInvoiceStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockInvoiceRepositoryMockRecorder) GetStatistics(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockInvoiceRepository)(nil).GetStatistics), ctx, customerID)
}

// UpdateInvoiceStatus mocks base method.
func (m *MockInvoiceRepository) UpdateInvoiceStatus(ctx context.Context, invoiceID uint, status models.InvoiceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceStatus", ctx, invoiceID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvoiceStatus indicates an expected call of UpdateInvoiceStatus.
func (mr *MockInvoiceRepositoryMockRecorder) UpdateInvoiceStatus(ctx, invoiceID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceStatus", reflect.TypeOf((*MockInvoiceRepository)(nil).UpdateInvoiceStatus), ctx, invoiceID, status)
}

// UpdateShareableLink mocks base method.
func (m *MockInvoiceRepository) UpdateShareableLink(ctx context.Context, invoiceID uint, link string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShareableLink", ctx, invoiceID, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShareableLink indicates an expected call of UpdateShareableLink.
func (mr *MockInvoiceRepositoryMockRecorder) UpdateShareableLink(ctx, invoiceID, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShareableLink", reflect.TypeOf((*MockInvoiceRepository)(nil).UpdateShareableLink), ctx, invoiceID, link)
}
