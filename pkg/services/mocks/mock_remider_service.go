// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/interfaces/remider_service.interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/services/interfaces/remider_service.interface.go -destination=pkg/services/mocks/mock_remider_service.go -package=services_mocks
//

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Adebayobenjamin/numerisbook/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRemiderService is a mock of RemiderService interface.
type MockRemiderService struct {
	ctrl     *gomock.Controller
	recorder *MockRemiderServiceMockRecorder
	isgomock struct{}
}

// MockRemiderServiceMockRecorder is the mock recorder for MockRemiderService.
type MockRemiderServiceMockRecorder struct {
	mock *MockRemiderService
}

// NewMockRemiderService creates a new mock instance.
func NewMockRemiderService(ctrl *gomock.Controller) *MockRemiderService {
	mock := &MockRemiderService{ctrl: ctrl}
	mock.recorder = &MockRemiderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemiderService) EXPECT() *MockRemiderServiceMockRecorder {
	return m.recorder
}

// SetInvoiceReminders mocks base method.
func (m *MockRemiderService) SetInvoiceReminders(ctx context.Context, invoice *models.Invoice, customerID uint, shedules map[models.InvoiceReminderSchedule]bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInvoiceReminders", ctx, invoice, customerID, shedules)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInvoiceReminders indicates an expected call of SetInvoiceReminders.
func (mr *MockRemiderServiceMockRecorder) SetInvoiceReminders(ctx, invoice, customerID, shedules any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInvoiceReminders", reflect.TypeOf((*MockRemiderService)(nil).SetInvoiceReminders), ctx, invoice, customerID, shedules)
}
