// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/interfaces/invoice_service.interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/services/interfaces/invoice_service.interface.go -destination=pkg/services/mocks/mock_invoice_service.go -package=services_mocks
//

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	request_dto "github.com/Adebayobenjamin/numerisbook/pkg/dtos/request"
	response_dto "github.com/Adebayobenjamin/numerisbook/pkg/dtos/response"
	models "github.com/Adebayobenjamin/numerisbook/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockInvoiceService is a mock of InvoiceService interface.
type MockInvoiceService struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceServiceMockRecorder
	isgomock struct{}
}

// MockInvoiceServiceMockRecorder is the mock recorder for MockInvoiceService.
type MockInvoiceServiceMockRecorder struct {
	mock *MockInvoiceService
}

// NewMockInvoiceService creates a new mock instance.
func NewMockInvoiceService(ctrl *gomock.Controller) *MockInvoiceService {
	mock := &MockInvoiceService{ctrl: ctrl}
	mock.recorder = &MockInvoiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceService) EXPECT() *MockInvoiceServiceMockRecorder {
	return m.recorder
}

// ConfirmPayment mocks base method.
func (m *MockInvoiceService) ConfirmPayment(ctx context.Context, invoiceID uint, amount float64, date time.Time, isPartial bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPayment", ctx, invoiceID, amount, date, isPartial)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmPayment indicates an expected call of ConfirmPayment.
func (mr *MockInvoiceServiceMockRecorder) ConfirmPayment(ctx, invoiceID, amount, date, isPartial any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPayment", reflect.TypeOf((*MockInvoiceService)(nil).ConfirmPayment), ctx, invoiceID, amount, date, isPartial)
}

// CreateInvoice mocks base method.
func (m *MockInvoiceService) CreateInvoice(ctx context.Context, customerID uint, request *request_dto.CreateInvoiceRequest) (*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, customerID, request)
	ret0, _ := ret[0].(*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockInvoiceServiceMockRecorder) CreateInvoice(ctx, customerID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockInvoiceService)(nil).CreateInvoice), ctx, customerID, request)
}

// DuplicateInvoice mocks base method.
func (m *MockInvoiceService) DuplicateInvoice(ctx context.Context, invoice *models.Invoice) (*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DuplicateInvoice", ctx, invoice)
	ret0, _ := ret[0].(*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DuplicateInvoice indicates an expected call of DuplicateInvoice.
func (mr *MockInvoiceServiceMockRecorder) DuplicateInvoice(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DuplicateInvoice", reflect.TypeOf((*MockInvoiceService)(nil).DuplicateInvoice), ctx, invoice)
}

// GetCustomerInvoices mocks base method.
func (m *MockInvoiceService) GetCustomerInvoices(ctx context.Context, limit, page int, customerID uint) ([]models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerInvoices", ctx, limit, page, customerID)
	ret0, _ := ret[0].([]models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerInvoices indicates an expected call of GetCustomerInvoices.
func (mr *MockInvoiceServiceMockRecorder) GetCustomerInvoices(ctx, limit, page, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerInvoices", reflect.TypeOf((*MockInvoiceService)(nil).GetCustomerInvoices), ctx, limit, page, customerID)
}

// GetInvoiceByIDandCustomer mocks base method.
func (m *MockInvoiceService) GetInvoiceByIDandCustomer(ctx context.Context, invoiceID, customerID uint) (*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceByIDandCustomer", ctx, invoiceID, customerID)
	ret0, _ := ret[0].(*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceByIDandCustomer indicates an expected call of GetInvoiceByIDandCustomer.
func (mr *MockInvoiceServiceMockRecorder) GetInvoiceByIDandCustomer(ctx, invoiceID, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceByIDandCustomer", reflect.TypeOf((*MockInvoiceService)(nil).GetInvoiceByIDandCustomer), ctx, invoiceID, customerID)
}

// GetInvoiceDetails mocks base method.
func (m *MockInvoiceService) GetInvoiceDetails(ctx context.Context, invoiceID uint) (*response_dto.GetInvoiceDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceDetails", ctx, invoiceID)
	ret0, _ := ret[0].(*response_dto.GetInvoiceDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceDetails indicates an expected call of GetInvoiceDetails.
func (mr *MockInvoiceServiceMockRecorder) GetInvoiceDetails(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceDetails", reflect.TypeOf((*MockInvoiceService)(nil).GetInvoiceDetails), ctx, invoiceID)
}

// GetInvoiceStatistics mocks base method.
func (m *MockInvoiceService) GetInvoiceStatistics(ctx context.Context, customerID uint) (*response_dto.GetInvoiceStatisticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceStatistics", ctx, customerID)
	ret0, _ := ret[0].(*response_dto.GetInvoiceStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceStatistics indicates an expected call of GetInvoiceStatistics.
func (mr *MockInvoiceServiceMockRecorder) GetInvoiceStatistics(ctx, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceStatistics", reflect.TypeOf((*MockInvoiceService)(nil).GetInvoiceStatistics), ctx, customerID)
}

// GetShareableLink mocks base method.
func (m *MockInvoiceService) GetShareableLink(ctx context.Context, invoice *models.Invoice) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShareableLink", ctx, invoice)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShareableLink indicates an expected call of GetShareableLink.
func (mr *MockInvoiceServiceMockRecorder) GetShareableLink(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShareableLink", reflect.TypeOf((*MockInvoiceService)(nil).GetShareableLink), ctx, invoice)
}

// SetInvoiceStatusIfFullyPaid mocks base method.
func (m *MockInvoiceService) SetInvoiceStatusIfFullyPaid(ctx context.Context, invoice *models.Invoice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInvoiceStatusIfFullyPaid", ctx, invoice)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInvoiceStatusIfFullyPaid indicates an expected call of SetInvoiceStatusIfFullyPaid.
func (mr *MockInvoiceServiceMockRecorder) SetInvoiceStatusIfFullyPaid(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInvoiceStatusIfFullyPaid", reflect.TypeOf((*MockInvoiceService)(nil).SetInvoiceStatusIfFullyPaid), ctx, invoice)
}

// ValidatePaymentAmount mocks base method.
func (m *MockInvoiceService) ValidatePaymentAmount(ctx context.Context, amount float64, invoice *models.Invoice, isPartial bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePaymentAmount", ctx, amount, invoice, isPartial)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePaymentAmount indicates an expected call of ValidatePaymentAmount.
func (mr *MockInvoiceServiceMockRecorder) ValidatePaymentAmount(ctx, amount, invoice, isPartial any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePaymentAmount", reflect.TypeOf((*MockInvoiceService)(nil).ValidatePaymentAmount), ctx, amount, invoice, isPartial)
}
