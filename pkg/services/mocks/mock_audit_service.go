// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/interfaces/audit_service.interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/services/interfaces/audit_service.interface.go -destination=pkg/services/mocks/mock_audit_service.go -package=services_mocks
//

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Adebayobenjamin/numerisbook/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuditService is a mock of AuditService interface.
type MockAuditService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditServiceMockRecorder
	isgomock struct{}
}

// MockAuditServiceMockRecorder is the mock recorder for MockAuditService.
type MockAuditServiceMockRecorder struct {
	mock *MockAuditService
}

// NewMockAuditService creates a new mock instance.
func NewMockAuditService(ctrl *gomock.Controller) *MockAuditService {
	mock := &MockAuditService{ctrl: ctrl}
	mock.recorder = &MockAuditServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditService) EXPECT() *MockAuditServiceMockRecorder {
	return m.recorder
}

// CreateAuditTrail mocks base method.
func (m *MockAuditService) CreateAuditTrail(ctx context.Context, eventType models.EventType, logLevel models.LogLevel, message string, invoiceID, customerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuditTrail", ctx, eventType, logLevel, message, invoiceID, customerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuditTrail indicates an expected call of CreateAuditTrail.
func (mr *MockAuditServiceMockRecorder) CreateAuditTrail(ctx, eventType, logLevel, message, invoiceID, customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuditTrail", reflect.TypeOf((*MockAuditService)(nil).CreateAuditTrail), ctx, eventType, logLevel, message, invoiceID, customerID)
}

// GetAuditTrailsByInvoiceID mocks base method.
func (m *MockAuditService) GetAuditTrailsByInvoiceID(ctx context.Context, invoiceID, customerID uint, limit, page int) ([]models.AuditTrail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditTrailsByInvoiceID", ctx, invoiceID, customerID, limit, page)
	ret0, _ := ret[0].([]models.AuditTrail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditTrailsByInvoiceID indicates an expected call of GetAuditTrailsByInvoiceID.
func (mr *MockAuditServiceMockRecorder) GetAuditTrailsByInvoiceID(ctx, invoiceID, customerID, limit, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditTrailsByInvoiceID", reflect.TypeOf((*MockAuditService)(nil).GetAuditTrailsByInvoiceID), ctx, invoiceID, customerID, limit, page)
}

// GetCustomerAuditTrails mocks base method.
func (m *MockAuditService) GetCustomerAuditTrails(ctx context.Context, customerID uint, limit, page int) ([]models.AuditTrail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerAuditTrails", ctx, customerID, limit, page)
	ret0, _ := ret[0].([]models.AuditTrail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerAuditTrails indicates an expected call of GetCustomerAuditTrails.
func (mr *MockAuditServiceMockRecorder) GetCustomerAuditTrails(ctx, customerID, limit, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerAuditTrails", reflect.TypeOf((*MockAuditService)(nil).GetCustomerAuditTrails), ctx, customerID, limit, page)
}
